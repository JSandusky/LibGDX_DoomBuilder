package com.doom;

import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ObjectMap;
import com.badlogic.gdx.utils.XmlReader;

/** Reads an XML resource list generated by the XmlExport DoomBuilder2 plugin
 * The resources listed are textures and thing types, extending this class you can easily
 * preload textures and thing related resources before you load the map, otherwise it's an all or nothing load
 * and you'll have a fun time trying to show a progress bar
 * 
 * @author Jon
 *
 */
public abstract class AssetListLoader {
	Array<String> textures = new Array<String>();
	Array<Integer> things = new Array<Integer>();
	String mapName;
	String mapDesc;
	String prettyName;
	ObjectMap<String,String> properties = new ObjectMap<String,String>();
	
	public AssetListLoader(FileHandle file) {
		XmlReader rdr = new XmlReader();
		try {
			XmlReader.Element root = rdr.parse(file);
			
			mapName = root.get("name","");
			prettyName = root.get("display","");
			mapDesc = root.get("description","");
			
			XmlReader.Element tex = root.getChildByName("textures");
			for (int i = 0; i < tex.getChildCount(); ++i) {
				textures.add(tex.getChild(i).getText());
			}
			
			XmlReader.Element types = root.getChildByName("things");
			String[] parts = types.getText().split(",");
			for (String str : parts)
				things.add(Integer.parseInt(str));
			
			XmlReader.Element props = root.getChildByName("properties");
			if (props != null) {
				for (XmlReader.Element prop : props.getChildrenByName("property")) {
					properties.put(prop.get("name"),prop.getText());
				}
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	public ObjectMap<String,String> getProperties() {
		return properties;
	}
	
	/** add resources to the AssetManager queue */
	public void queue(AssetManager assets) {
		for (String str : textures) {
			loadTexture(assets,str);
		}
		
		for (Integer type : this.things) {
			onLoadThingType(type);
		}
	}
	
	/** queue for unloading from the AssetManager */
	public void unload(AssetManager assets) {
		for (String str : textures) {
			unloadTexture(assets,str);
		}
		
		for (Integer type : this.things) {
			onUnloadThingType(type);
		}
	}
	
	public abstract void loadTexture(AssetManager assets, String texName);
	public abstract void unloadTexture(AssetManager assets, String texName);
	public abstract void onLoadThingType(int typeID);
	public abstract void onUnloadThingType(int typeID);
	
	public String getMapName() {
		return mapName;
	}

	public String getMapDesc() {
		return mapDesc;
	}

	public String getPrettyName() {
		return prettyName;
	}
}
